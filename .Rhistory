log(1.25)
log(1.15)
exp(log(1.25) +c(-1,1) * 0.1)
exp(0.2 +c(-1,1) * 0.1)
exp(0.2 +c(-1,1) * 0.1) - 1
(exp(0.2 +c(-1,1) * 0.1) - 1) * 100
(1-exp(-0.2 +c(-1,1) * 0.1)) * 100
knitr::opts_chunk$set(fig.width=12, fig.height=8, results='verbatim',
cache=TRUE,message=F,warning=F,progress=FALSE,
echo=TRUE)
library(Matrix)
library(tidyverse)
library(stargazer)
library(kableExtra)
library(car)
library(lmtest)
source("http://myweb.uiowa.edu/dksewell/teaching/BIOS5720/SLR/ConfBand.R")
?stargazer
library(lubridate)
library(janitor)
library(tidyverse)
library(magrittr)
library(Matrix)
library(RColorBrewer)
Dim = function(x){if(is.null(dim(x))){return(NROW(x))}else{return(dim(x))}}
library(igraph)
B = matrix(0.0,5,5)
diag(B) = 4
B
phi = 1/2
B = outer(1:5,1:5,function(x,y) 4*phi^abs(x-y))
B
rowSums(B)
B = outer(1:5,1:5,function(x,y) 4*phi^abs(x-y)) / 10 * 3
B
B_eig = eigen(B)
B_eig
u = v = B_eig$vectors[,1]
u = v = -B_eig$vectors[,1]
u
u%*%v
sum(u)
u = v = -B_eig$vectors[,1]
v = v * sum(u)
u = u / sum(u)
v
u
u%*%v
sum(u)
u
v
sum(v)
plot(u,type='b')
# Integrate rstan
rstantools::use_rstan("~/SIC")
?normal
?rstan::normal
library(rstan)
?normal
?rstanarm::normal
?rstanarm::stan_glm
library(magrittr)
library(rstanarm)
library(dplyr)
library(plot.matrix)
install.packages("plot.matrix")
?rstan::sampling
library(rstan)
library(magrittr)
library(rstanarm)
library(dplyr)
library(plot.matrix)
library(viridis)
library(rstan)
import::from(ggplot2,ggtitle)
source("~/SIC/R/sic_simulator.R")
source("~/SIC/R/sic_frequentist.R")
source("~/SIC/R/sic.R")
source("~/SIC/R/plot.sic.R")
sic_data =
sic_simulator(seed = 2023)
formula = cbind(p1,p2,p3,p4,p5,p6,p7,p8,p9,p10) ~ x1 + x2 +(time | subject)
data = sic_data$data[[1]] %>% select(-tau)
seed = 2023
prior = normal(location = 0,
scale = 2.5,
autoscale = TRUE)
prior_intercept = normal(location = 0, scale = 2.5)
min_count_to_estimate = 5
CI_level = 0.95
verbose = TRUE
lrank = 2
n_lf_steps = 50
library(magrittr)
library(rstanarm)
library(dplyr)
library(plot.matrix)
library(viridis)
library(rstan)
import::from(ggplot2,ggtitle)
source("~/SIC/R/sic_simulator.R")
source("~/SIC/R/sic_frequentist.R")
source("~/SIC/R/sic.R")
source("~/SIC/R/plot.sic.R")
sic_data =
sic_simulator(seed = 2023)
formula = cbind(p1,p2,p3,p4,p5,p6,p7,p8,p9,p10) ~ x1 + x2 +(time | subject)
data = sic_data$data[[1]] %>% select(-tau)
seed = 2023
min_count_to_estimate = 5
CI_level = 0.95
lrank = 2
beta_prior_mean = 0.0
beta_prior_sd = 2.5
UV_prior_mean = 0.0
UV_prior_mean = sqrt(2.5) / lrank^(1/4)
verbose = TRUE
# Drop NAs
data %<>%
select(all.vars(formula)) %>%
na.omit()
# get names of ...
form_char = as.character(formula)[-1]
form_char[1] = gsub("cbind","",form_char[1])
form_char[1] = gsub("[[:punct:]]","",form_char[1])
## pathogen columns
pathogen_vars =
strsplit(form_char[1]," ")[[1]]
## covariates
X_vars =
gsub("\ \\+","",
substr(form_char[2],
start = 1,
stop = gregexpr("\\(",form_char[2])[[1]][1] - 3)
) %>%
strsplit(" ")
X_vars = X_vars[[1]]
## subject variable
subject_var =
gsub('[[:punct:]]',"",
substr(form_char[2],
start = gregexpr("\\|",form_char[2])[[1]][1] + 2,
stop = 1e4)
)
## time variable
time_var =
gsub('[[:punct:]]',"",
substr(form_char[2],
start = gregexpr("\\(",form_char[2])[[1]][1] + 1,
stop = gregexpr("\\|",form_char[2])[[1]][1] - 2)
)
# Store basic quantities
NT = nrow(data)
N =
data %>%
select(all_of(subject_var)) %>%
unlist() %>%
unique() %>%
length()
P = length(pathogen_vars)
Q = length(X_vars) + 1 # + 1 for the intercept
# arrange data by subject and by time
data %<>%
arrange(across(starts_with(subject_var)),
across(starts_with(time_var)))
# Compute time between observations (tau)
data %<>%
mutate(tau =
ifelse(
c(TRUE,data[[subject_var]][-1] ==
data[[subject_var]][-NT]),
diff(c(data[[time_var]][1],data[[time_var]])),
0.0)
)
# Create lagged variables
for(p in 1:P){
data[[paste0(pathogen_vars[p],"_lagged")]] =
ifelse(
c(FALSE,
data[[subject_var]][-1] == data[[subject_var]][-NT]),
c(-999,data[[pathogen_vars[p]]][-NT]),
NA)
}
data %<>%
na.omit()
# Distinguish between incidence and clearance
incidence_index =
clearance_index =
list()
for(p in 1:P){
incidence_index[[p]] =
which(data[[paste0(pathogen_vars[p],"_lagged")]] == 0)
clearance_index[[p]] =
which(data[[paste0(pathogen_vars[p],"_lagged")]] == 1)
}
# Compute tables to see if we can make inference
valid_responses = list()
valid_covariates = list()
valid_covariates$incidence =
valid_covariates$clearance = list()
tables = list()
tables$incidence =
tables$clearance = list()
rm(valid_covariates)
# Compute tables to see if we can make inference
valid_responses = list()
valid_covariates = list()
valid_covariates$incidence =
valid_covariates$clearance = list()
tables = list()
tables$incidence =
tables$clearance = list()
for(p in 1:P){
tables$incidence[[pathogen_vars[p]]] =
tables$clearance[[pathogen_vars[p]]] =
list()
if( (length(unique(data[[pathogen_vars[p]]][ incidence_index[[p]] ] )) > 1) &
(min(table(data[[pathogen_vars[p]]][ incidence_index[[p]]])) > min_count_to_estimate ) ){
valid_responses$incidence =
c(valid_responses$incidence,p)
no_valid_covars = TRUE
for(p2 in c(1:P)[-p]){
tables$incidence[[pathogen_vars[p]]][[pathogen_vars[p2]]] =
table(data[[pathogen_vars[p]]][ incidence_index[[p]] ] ,
data[[paste0(pathogen_vars[p2],"_lagged")]][ incidence_index[[p]] ] )
names(dimnames(tables$incidence[[pathogen_vars[p]]][[pathogen_vars[p2]]] )) =
pathogen_vars[c(p,p2)]
if( (ncol(tables$incidence[[pathogen_vars[p]]][[pathogen_vars[p2]]]) > 1) &
(min(tables$incidence[[pathogen_vars[p]]][[pathogen_vars[p2]]]) >= min_count_to_estimate) ){
if(no_valid_covars){
valid_covariates$incidence[[ p ]] = p2
no_valid_covars = FALSE
}else{
valid_covariates$incidence[[ p ]] =
c(valid_covariates$incidence[[ p ]],
p2)
}
}
}
}
if( (length(unique(data[[pathogen_vars[p]]][ clearance_index[[p]] ] )) > 1) &
(min(table(data[[pathogen_vars[p]]][ clearance_index[[p]]])) > min_count_to_estimate ) ){
valid_responses$clearance =
c(valid_responses$clearance,p)
no_valid_covars = TRUE
for(p2 in c(1:P)[-p]){
tables$clearance[[pathogen_vars[p]]][[pathogen_vars[p2]]] =
table(data[[pathogen_vars[p]]][ clearance_index[[p]] ] ,
data[[paste0(pathogen_vars[p2],"_lagged")]][ clearance_index[[p]] ] )
names(dimnames(tables$clearance[[pathogen_vars[p]]][[pathogen_vars[p2]]] )) =
pathogen_vars[c(p,p2)]
if( (ncol(tables$clearance[[pathogen_vars[p]]][[pathogen_vars[p2]]]) > 1) &
(min(tables$clearance[[pathogen_vars[p]]][[pathogen_vars[p2]]]) >= min_count_to_estimate) ){
if(no_valid_covars){
valid_covariates$clearance[[ p ]] = p2
no_valid_covars = FALSE
}else{
valid_covariates$clearance[[ p ]] =
c(valid_covariates$clearance[[ p ]],
p2)
}
}
}
}
}
if(verbose) cat("\------ Initializing incidence component\n")
if(verbose) cat("\n------ Initializing incidence component\n")
init_fits = list()
for(p in valid_responses$incidence){
try({
if(is.null(valid_covariates$incidence[[p]])){
formula_p =
as.formula(paste0(
pathogen_vars[p],
" ~ ",
paste(X_vars,
collapse = " + ")
))
}else{
formula_p =
as.formula(paste0(
pathogen_vars[p],
" ~ ",
paste(c(X_vars,
paste(pathogen_vars[valid_covariates$incidence[[p]]],
"_lagged",
sep = "")),
collapse = " + ")
))
}
init_fits[[p]] =
glm(formula_p,
data = data[incidence_index[[p]],],
family = binomial("cloglog"))
},silent = TRUE)
}
?stanc
?stan
rm(valid_covariates)
# Compute tables to see if we can make inference
valid_responses = list()
tables = list()
tables$incidence =
tables$clearance = list()
rm(tables)
# Compute tables to see if we can make inference
valid_responses = list()
for(p in 1:P){
if( (length(unique(data[[pathogen_vars[p]]][ incidence_index[[p]] ] )) > 1) &
(min(table(data[[pathogen_vars[p]]][ incidence_index[[p]]])) > min_count_to_estimate ) ){
valid_responses$incidence =
c(valid_responses$incidence,p)
}
if( (length(unique(data[[pathogen_vars[p]]][ clearance_index[[p]] ] )) > 1) &
(min(table(data[[pathogen_vars[p]]][ clearance_index[[p]]])) > min_count_to_estimate ) ){
valid_responses$clearance =
c(valid_responses$clearance,p)
}
}
valid_covariates
valid_responses
stanmodels
?rstan::sampling
stanmodels = list(sic_lowrank = stan_model("~/SIC/inst/stan/sic_lowrank.stan"))
stanmodels = list(sic_lowrank = stan_model("~/SIC/inst/stan/sic_lowrank.stan"))
stanmodels = list(sic_lowrank = stan_model("~/SIC/inst/stan/sic_lowrank.stan"))
stanmodels = list(sic_lowrank = stan_model("~/SIC/inst/stan/sic_lowrank.stan"))
